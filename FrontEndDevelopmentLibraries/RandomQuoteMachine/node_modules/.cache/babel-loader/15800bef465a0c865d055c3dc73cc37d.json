{"ast":null,"code":"var _jsxFileName = \"/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuotes, Quotes } from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState(new Quotes());\n  const [colors, setColors] = useState([]);\n\n  const generateNewQuote = async () => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();\n    setQuote(newQuote);\n    setLoading(false);\n  };\n\n  const generateNewColor = () => {\n    let a = Math.floor(Math.random() * 256);\n    let b = Math.floor(Math.random() * 256);\n    let c = Math.floor(Math.random() * 256);\n    let color = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther = `rgba(${255 - a}, ${255 - b}, ${255 - c}, 1)`;\n    let newColor = [color, colorOther];\n    setColors(newColor);\n  }; // const newColor: string[] = generateNewColor();\n  // initialize the quote card\n\n\n  useEffect(() => {\n    generateNewQuote();\n  }, []);\n  useEffect(() => {\n    generateNewColor();\n  }); // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BodyWrapper, {\n      color: colors[0],\n      children: /*#__PURE__*/_jsxDEV(QuotesCard, {\n        author: quote.author,\n        quote: quote.content,\n        callback: generateNewQuote,\n        colors: colors,\n        isLoading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"uA/gYEKuowVZctokA+OqP5RiHW0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx"],"names":["React","useState","useEffect","fetchQuotes","Quotes","GlobalStyle","BodyWrapper","QuotesCard","App","loading","setLoading","quote","setQuote","colors","setColors","generateNewQuote","newQuote","generateNewColor","a","Math","floor","random","b","c","color","colorOther","newColor","author","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,WAAR,EAAqBC,MAArB,QAAkC,OAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,cAAzC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;;AAEA,MAAMC,GAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAS,IAAIG,MAAJ,EAAT,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAW,EAAX,CAApC;;AAEA,QAAMc,gBAAqC,GAAG,YAAW;AACvDL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMM,QAAQ,GAAG,MAAMb,WAAW,EAAlC;AACAS,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACAN,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GALD;;AAOA,QAAMO,gBAA4B,GAAG,MAAM;AACzC,QAAIC,CAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIC,CAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIE,CAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIG,KAAa,GAAI,QAAON,CAAE,KAAII,CAAE,KAAIC,CAAE,MAA1C;AACA,QAAIE,UAAkB,GAAI,QAAO,MAAIP,CAAE,KAAI,MAAII,CAAE,KAAI,MAAIC,CAAE,MAA3D;AACA,QAAIG,QAAkB,GAAG,CAACF,KAAD,EAAQC,UAAR,CAAzB;AAEAX,IAAAA,SAAS,CAACY,QAAD,CAAT;AACD,GATD,CAZyC,CAuBzC;AAEA;;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AAACa,IAAAA,gBAAgB;AAAG,GAA3B,EAA6B,EAA7B,CAAT;AACAb,EAAAA,SAAS,CAAC,MAAM;AAACe,IAAAA,gBAAgB;AAAG,GAA3B,CAAT,CA3ByC,CA4BzC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEI,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEJ,MAAM,CAAC,CAAD,CAA1B;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,MAAM,EAAEF,KAAK,CAACgB,MADhB;AAEE,QAAA,KAAK,EAAEhB,KAAK,CAACiB,OAFf;AAGE,QAAA,QAAQ,EAAEb,gBAHZ;AAIE,QAAA,MAAM,EAAIF,MAJZ;AAKE,QAAA,SAAS,EAAIJ;AALf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADF;AAcD,CAnDD;;GAAMD,G;;KAAAA,G;AAqDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n  const [colors, setColors] = useState<string[]>([]);\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n    setLoading(false);\n  }\n\n  const generateNewColor: () => void = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let color: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther: string = `rgba(${255-a}, ${255-b}, ${255-c}, 1)`;\n    let newColor: string[] = [color, colorOther];\n\n    setColors(newColor);\n  }\n\n  // const newColor: string[] = generateNewColor();\n\n  // initialize the quote card\n  useEffect(() => {generateNewQuote()}, []);\n  useEffect(() => {generateNewColor()});\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n  return (\n    <>\n      <GlobalStyle /> \n        <BodyWrapper color={colors[0]}>\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={generateNewQuote} \n            colors = {colors}\n            isLoading = {loading} />\n        </BodyWrapper>\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}