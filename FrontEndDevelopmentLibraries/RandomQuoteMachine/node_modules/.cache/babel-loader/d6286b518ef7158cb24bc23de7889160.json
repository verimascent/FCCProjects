{"ast":null,"code":"var _jsxFileName = \"/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuotes, Quotes } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState(new Quotes());\n\n  const generateNewQuote = async () => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();\n    setQuote(newQuote);\n  };\n\n  const generateNewColor = () => {\n    let a = Math.floor(Math.random() * 256);\n    let b = Math.floor(Math.random() * 256);\n    let c = Math.floor(Math.random() * 256);\n    let newColor = `rgba(${a}, ${b}, ${c}, 1)`;\n    return newColor;\n  };\n\n  const newColor = generateNewColor(); // initialize the quote card\n\n  useEffect(() => {\n    generateNewQuote();\n  }, []); // make the quote change automatically\n\n  useEffect(() => {\n    const timeQuote = setInterval(() => {\n      generateNewQuote();\n    }, 10000); // avoid that the timer becomes faster and faster, clear the time interval before\n\n    return () => clearInterval(timeQuote);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      color: newColor,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QuotesCard, {\n          author: quote.author,\n          quote: quote.content,\n          callback: generateNewQuote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"3mcnuLvnutsuOMJpK9OmufQ2HV0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx"],"names":["React","useState","useEffect","fetchQuotes","Quotes","GlobalStyle","Wrapper","QuotesCard","App","loading","setLoading","quote","setQuote","generateNewQuote","newQuote","generateNewColor","a","Math","floor","random","b","c","newColor","timeQuote","setInterval","clearInterval","author","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,WAAR,EAAqBC,MAArB,QAAkC,OAAlC;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;;AAEA,MAAMC,GAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAS,IAAIG,MAAJ,EAAT,CAAlC;;AAEA,QAAMS,gBAAqC,GAAG,YAAW;AACvDH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMI,QAAQ,GAAG,MAAMX,WAAW,EAAlC;AACAS,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAJD;;AAMA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIC,CAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIC,CAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIE,CAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAhB;AACA,QAAIG,QAAgB,GAAI,QAAON,CAAE,KAAII,CAAE,KAAIC,CAAE,MAA7C;AACA,WAAOC,QAAP;AACD,GAND;;AAQA,QAAMA,QAAQ,GAAGP,gBAAgB,EAAjC,CAlByC,CAoBzC;;AACAb,EAAAA,SAAS,CAAC,MAAM;AAACW,IAAAA,gBAAgB;AAAG,GAA3B,EAA6B,EAA7B,CAAT,CArByC,CAuBzC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,SAAyB,GAAGC,WAAW,CAAC,MAAM;AAClDX,MAAAA,gBAAgB;AACjB,KAF4C,EAE1C,KAF0C,CAA7C,CADc,CAKd;;AACA,WAAO,MAAMY,aAAa,CAACF,SAAD,CAA1B;AACD,GAPQ,CAAT;AAQA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAED,QAAhB;AAAA,6BACA;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,MAAM,EAAEX,KAAK,CAACe,MADhB;AAEE,UAAA,KAAK,EAAEf,KAAK,CAACgB,OAFf;AAGE,UAAA,QAAQ,EAAEd;AAHZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADF;AAeD,CA/CD;;GAAML,G;;KAAAA,G;AAiDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard'\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n  }\n\n  const generateNewColor = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let newColor: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    return newColor;\n  }\n\n  const newColor = generateNewColor();\n\n  // initialize the quote card\n  useEffect(() => {generateNewQuote()}, [])\n\n  // make the quote change automatically\n  useEffect(() => {\n    const timeQuote: NodeJS.Timeout = setInterval(() => {\n      generateNewQuote();\n    }, 10000);\n\n    // avoid that the timer becomes faster and faster, clear the time interval before\n    return () => clearInterval(timeQuote)\n  });\n  return (\n    <>\n      <GlobalStyle /> \n        <Wrapper color={newColor}>\n        <div >\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={generateNewQuote} \n            />\n        </div>\n        </Wrapper>\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}