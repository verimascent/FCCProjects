{"ast":null,"code":"var _jsxFileName = \"/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuotes, Quotes } from './API';\nimport QuotesCard from './components/QuotesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState(new Quotes());\n\n  const generateNewQuote = async () => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();\n    setQuote(newQuote);\n  }; // initialize the quote\n\n\n  useEffect(() => {\n    generateNewQuote();\n  }, []); // make the quote change automatically\n\n  useEffect(() => {\n    const timeQuote = setInterval(() => {\n      generateNewQuote();\n    }, 10000); // avoid that the timer becomes faster and faster, clear the time interval before\n\n    return () => clearInterval(timeQuote);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"background\",\n      children: /*#__PURE__*/_jsxDEV(QuotesCard, {\n        author: quote.author,\n        quote: quote.content,\n        callback: generateNewQuote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"3mcnuLvnutsuOMJpK9OmufQ2HV0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/primeminister/Documents/FullStackCodeLearning/FreeCodeCamp/FrontEndDevelopmentLibraries/RandomQuoteMachine/src/App.tsx"],"names":["React","useState","useEffect","fetchQuotes","Quotes","QuotesCard","App","loading","setLoading","quote","setQuote","generateNewQuote","newQuote","timeQuote","setInterval","clearInterval","author","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,WAAR,EAAqBC,MAArB,QAAkC,OAAlC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;;AAEA,MAAMC,GAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAS,IAAIG,MAAJ,EAAT,CAAlC;;AAEA,QAAMO,gBAAqC,GAAG,YAAW;AACvDH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMI,QAAQ,GAAG,MAAMT,WAAW,EAAlC;AACAO,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAJD,CAJyC,CAUzC;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AAACS,IAAAA,gBAAgB;AAAG,GAA3B,EAA6B,EAA7B,CAAT,CAXyC,CAazC;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAyB,GAAGC,WAAW,CAAC,MAAM;AAClDH,MAAAA,gBAAgB;AACjB,KAF4C,EAE1C,KAF0C,CAA7C,CADc,CAKd;;AACA,WAAO,MAAMI,aAAa,CAACF,SAAD,CAA1B;AACD,GAPQ,CAAT;AAQA,sBACE;AAAA,2BACE;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,MAAM,EAAEJ,KAAK,CAACO,MADhB;AAEE,QAAA,KAAK,EAAEP,KAAK,CAACQ,OAFf;AAGE,QAAA,QAAQ,EAAEN;AAHZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD,CAhCD;;GAAML,G;;KAAAA,G;AAkCN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport QuotesCard from './components/QuotesCard'\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    setLoading(true);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n  }\n\n  // initialize the quote\n  useEffect(() => {generateNewQuote()}, [])\n\n  // make the quote change automatically\n  useEffect(() => {\n    const timeQuote: NodeJS.Timeout = setInterval(() => {\n      generateNewQuote();\n    }, 10000);\n\n    // avoid that the timer becomes faster and faster, clear the time interval before\n    return () => clearInterval(timeQuote)\n  });\n  return (\n    <>\n      <div id=\"background\">\n        <QuotesCard\n          author={quote.author}\n          quote={quote.content}\n          callback={generateNewQuote} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}